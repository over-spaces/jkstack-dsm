<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.jkstack.dsm.user.mapper.DepartmentMapper">

    <resultMap type="com.jkstack.dsm.user.entity.DepartmentEntity" id="DepartmentMap">
        <result property="departmentId" column="department_id" jdbcType="VARCHAR"/>
        <result property="name" column="name" jdbcType="VARCHAR"/>
        <result property="parentDepartmentId" column="parent_department_id" jdbcType="VARCHAR"/>
        <result property="deep" column="deep" jdbcType="INTEGER"/>
        <result property="sort" column="sort" jdbcType="INTEGER"/>
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="tenantId" column="tenant_id" jdbcType="VARCHAR"/>
        <result property="companyId" column="company_id" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="OTHER"/>
        <result property="creatorId" column="creator_id" jdbcType="VARCHAR"/>
        <result property="modifyTime" column="modify_time" jdbcType="OTHER"/>
        <result property="modifierId" column="modifier_id" jdbcType="VARCHAR"/>
        <result property="rgt" column="rgt" jdbcType="INTEGER"/>
        <result property="lft" column="lft" jdbcType="INTEGER"/>
    </resultMap>

    <select id="selectListByUserId" resultType="com.jkstack.dsm.user.entity.DepartmentEntity">
        SELECT dept.* FROM dsm_department dept
            LEFT JOIN dsm_department_user duser ON dept.department_id=duser.department_id
            WHERE duser.user_id='${userId}'
    </select>

    <select id="listChildrenDepartmentIds" parameterType="int" resultType="java.lang.String">
        SELECT d.department_id AS count FROM dsm_department d WHERE d.lft &gt; ${lft} AND d.rgt &lt; ${rgt}
    </select>

    <select id="getMaxRightValue" resultType="int">
        select MAX(rgt) from dsm_department
    </select>

    <select id="selectLRNodeList" resultType="com.jkstack.dsm.common.lr.LRNode">
        SELECT department_id AS id, parent_department_id AS parentId, name FROM dsm_department ORDER BY parent_department_id
    </select>

    <select id="getMaxSortValueByDeep" parameterType="int" resultType="java.lang.Integer">
        SELECT MAX(sort) FROM dsm_department WHERE deep=${deep}
    </select>

    <select id="getMaxSortValueByParentDepartmentId" parameterType="string" resultType="java.lang.Integer">
        SELECT MAX(sort) FROM dsm_department WHERE parent_department_id='${parentDepartmentId}'
    </select>

    <select id="isExistRootDepartmentByNotDepartmentId"  resultType="java.lang.Integer">
        SELECT 1 FROM dsm_department where (deep=1 OR parent_department_id IS NULL) AND department_id!=#{departmentId}  LIMIT 1
    </select>


    <select id="isExistRootDepartment"  resultType="java.lang.Integer">
        SELECT 1 FROM dsm_department where deep=1 OR parent_department_id IS NULL LIMIT 1
    </select>

</mapper>